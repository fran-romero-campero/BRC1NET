<<<<<<< Updated upstream
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 10
end.time <- 2
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
setwd("~/Dropbox/github_repos/BRC1_transcriptional_network")
## Load network
network.data <- read.table(file="data/brc1_transcriptional_network.tsv",header = TRUE,as.is=TRUE,sep="\t",comment.char = "")
#head(network.data)
colnames(network.data)[56] <- "ATHB-53"
colnames(network.data)[54] <- "DOF5-4"
colnames(network.data)[51] <- "NAC6-ORE1"
colnames(network.data)[46] <- "ATHB-40"
colnames(network.data)[34] <- "ATHB-6"
colnames(network.data)[33] <- "ATHB-21"
## Transforming coordinates for a better visualization
x.coord <- as.numeric(network.data$y.pos)
y.coord <- as.numeric(network.data$x.pos)
## Extract gene ids
genes <- sort(network.data$name)
## Extract TFs
tfs.data <- read.table(file = "data/network_tfs.txt",header=T, as.is=T)
tf.ids <- tfs.data$AGI
names(tf.ids) <- tfs.data$name
shiny::runApp()
network.representation <- ggplot(network.data, aes(x.pos,y.pos)) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks.y = element_blank())
network.representation
input_selected.tfs <- c("BRC1","HEC1")
input_selected.tfs
i <- 1
subset(network.data, name == input_selected.tfs[i])
head(network.data)
subset(network.data, names == input_selected.tfs[i])
tfs.data
tf.ids
tf.ids[input_selected.tfs[i]]
subset(network.data, names == tf.ids[input_selected.tfs[i]])
subset(network.data, names == tf.ids[input_selected.tfs[i]])[["x.pos"]]
tf.xpos <- subset(network.data, names == tf.ids[input_selected.tfs[i]])[["x.pos"]]
tf.ypos <- subset(network.data, names == tf.ids[input_selected.tfs[i]])[["y.pos"]]
runApp()
runApp()
input_selected.tfs
length(input_selected.tfs)
i <- 1
tf.xpos <- subset(network.data, names == tf.ids[input$selected.tfs[i]])[["x.pos"]]
tf.ypos <- subset(network.data, names == tf.ids[input$selected.tfs[i]])[["y.pos"]]
tf.xpos <- subset(network.data, names == tf.ids[input_selected.tfs[i]])[["x.pos"]]
tf.ypos <- subset(network.data, names == tf.ids[input_selected.tfs[i]])[["y.pos"]]
tf.xpos
tf.ypos
selected.tfs.df <- subset(network.data, names %in% tf.ids[input_selected.tfs])
selected.tfs.df
gene.selection <- rowSums(network.data[,input_selected.tfs]) == length(input_selected.tfs)
selected.genes.df <- network.data[gene.selection,]
selected.nodes.colors <- selected.genes.df$color
nrow(selected.genes.df)
j <- 1
target.gene.xpos <- selected.genes.df$x.pos[j]
target.gene.ypos <- selected.genes.df$x.pos[j]
target.gene.xpos
target.gene.ypos
network.representation
network.representation <- network.representation +
geom_segment(aes(x=tf.xpos,y=tf.ypos,xend=target.gene.xpos,yend=target.gene.xpos),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
j <- 2
target.gene.xpos <- selected.genes.df$x.pos[j]
target.gene.ypos <- selected.genes.df$x.pos[j]
network.representation <- network.representation +
geom_segment(aes(x=tf.xpos,y=tf.ypos,xend=target.gene.xpos,yend=target.gene.xpos),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
network.representation <- ggplot(network.data, aes(x.pos,y.pos)) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks.y = element_blank()) +
geom_point(color=network.data$color,size=1) +
geom_point(data = selected.tfs.df, size=8, fill=selected.tfs.df$color,colour="black",pch=21) +
geom_point(data = selected.genes.df,aes(x.pos,y.pos), size=4, fill=selected.nodes.colors,colour="black",pch=21)
network.representation
i <- 1
tf.xpos <- subset(network.data, names == tf.ids[input_selected.tfs[i]])[["x.pos"]]
tf.ypos <- subset(network.data, names == tf.ids[input_selected.tfs[i]])[["y.pos"]]
j <- 1
target.gene.xpos <- selected.genes.df$x.pos[j]
target.gene.ypos <- selected.genes.df$x.pos[j]
network.representation <- network.representation +
geom_segment(aes(x=tf.xpos,y=tf.ypos,xend=target.gene.xpos,yend=target.gene.xpos),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
j <- 2
target.gene.xpos <- selected.genes.df$x.pos[j]
target.gene.ypos <- selected.genes.df$x.pos[j]
network.representation <- network.representation +
geom_segment(aes(x=tf.xpos,y=tf.ypos,xend=target.gene.xpos,yend=target.gene.xpos),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
j <- 3
target.gene.xpos <- selected.genes.df$x.pos[j]
target.gene.ypos <- selected.genes.df$x.pos[j]
network.representation <- network.representation +
geom_segment(aes(x=tf.xpos,y=tf.ypos,xend=target.gene.xpos,yend=target.gene.xpos),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
j <- 3
target.gene.xpos <- selected.genes.df$x.pos[j]
target.gene.ypos <- selected.genes.df$x.pos[j]
network.representation <- network.representation +
geom_segment(aes(x=tf.xpos,y=tf.ypos,xend=target.gene.xpos,yend=target.gene.xpos),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
selected.genes.df$x.pos
selected.genes.df$x.pos[j]
target.gene.xpos <- selected.genes.df$x.pos[j]
target.gene.ypos <- selected.genes.df$y.pos[j]
network.representation <- network.representation +
geom_segment(aes(x=tf.xpos,y=tf.ypos,xend=target.gene.xpos,yend=target.gene.xpos),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
i <- 1
tf.xpos <- subset(network.data, names == tf.ids[input_selected.tfs[i]])[["x.pos"]]
tf.ypos <- subset(network.data, names == tf.ids[input_selected.tfs[i]])[["y.pos"]]
j <- 1
target.gene.xpos <- selected.genes.df$x.pos[j]
target.gene.ypos <- selected.genes.df$y.pos[j]
network.representation <- network.representation +
geom_segment(aes(x=tf.xpos,y=tf.ypos,xend=target.gene.xpos,yend=target.gene.xpos),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
network.representation <- network.representation +
geom_segment(aes(x=rep(tf.xpos,nrow(selected.genes.df)),y=rep(tf.ypos,nrow(selected.genes.df)),
xend=selected.genes.df$x.pos,yend=selected.genes.df$y.pos),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
network.representation <- network.representation +
geom_segment(aes(x=rep(tf.xpos,nrow(selected.genes.df)),y=rep(tf.ypos,nrow(selected.genes.df)),
xend=selected.genes.df$x.pos,yend=selected.genes.df$y.pos),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
rep(tf.xpos,nrow(selected.genes.df))
rep(tf.ypos,nrow(selected.genes.df))
selected.genes.df$x.pos
selected.genes.df$y.pos
network.representation <- network.representation +
geom_segment(aes(x=rep(tf.xpos,nrow(selected.genes.df))[1],y=rep(tf.ypos,nrow(selected.genes.df))[1],
xend=selected.genes.df$x.pos[1],yend=selected.genes.df$y.pos)[1],
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
rep(tf.xpos,nrow(selected.genes.df))[1]
rep(tf.ypos,nrow(selected.genes.df))[1]
selected.genes.df$y.pos)[1]
network.representation <- network.representation +
geom_segment(aes(x=rep(tf.xpos,nrow(selected.genes.df))[1],y=rep(tf.ypos,nrow(selected.genes.df))[1],
xend=selected.genes.df$x.pos[1],yend=selected.genes.df$y.pos[1]),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
network.representation <- ggplot(network.data, aes(x.pos,y.pos)) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks.y = element_blank()) +
geom_point(color=network.data$color,size=1) +
geom_point(data = selected.tfs.df, size=8, fill=selected.tfs.df$color,colour="black",pch=21) +
geom_point(data = selected.genes.df,aes(x.pos,y.pos), size=4, fill=selected.nodes.colors,colour="black",pch=21)
network.representation
network.representation <- network.representation +
geom_segment(aes(x=rep(tf.xpos,nrow(selected.genes.df))[1],y=rep(tf.ypos,nrow(selected.genes.df))[1],
xend=selected.genes.df$x.pos[1],yend=selected.genes.df$y.pos[1]),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
network.representation <- network.representation +
geom_segment(aes(x=rep(tf.xpos,nrow(selected.genes.df))[1:2],y=rep(tf.ypos,nrow(selected.genes.df))[1:2],
xend=selected.genes.df$x.pos[1:2],yend=selected.genes.df$y.pos[1:2]),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
network.representation <- ggplot(network.data, aes(x.pos,y.pos)) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks.y = element_blank()) +
geom_point(color=network.data$color,size=1) +
geom_point(data = selected.tfs.df, size=8, fill=selected.tfs.df$color,colour="black",pch=21) +
geom_point(data = selected.genes.df,aes(x.pos,y.pos), size=4, fill=selected.nodes.colors,colour="black",pch=21)
network.representation <- network.representation +
geom_segment(aes(x=rep(tf.xpos,nrow(selected.genes.df))[1:2],y=rep(tf.ypos,nrow(selected.genes.df))[1:2],
xend=selected.genes.df$x.pos[1:2],yend=selected.genes.df$y.pos[1:2]),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
nrow(network.data)
network.representation
network.representation <- ggplot(network.data, aes(x.pos,y.pos)) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks.y = element_blank()) +
geom_point(color=network.data$color,size=1) +
geom_point(data = selected.tfs.df, size=8, fill=selected.tfs.df$color,colour="black",pch=21) +
geom_point(data = selected.genes.df,aes(x.pos,y.pos), size=4, fill=selected.nodes.colors,colour="black",pch=21)
network.representation +
geom_segment(aes(x=rep(tf.xpos,nrow(selected.genes.df))[1:2],y=rep(tf.ypos,nrow(selected.genes.df))[1:2],
xend=selected.genes.df$x.pos[1:2],yend=selected.genes.df$y.pos[1:2]),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation <- ggplot(network.data, aes(x.pos,y.pos)) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks.y = element_blank())
network.representation +
geom_segment(aes(x=rep(tf.xpos,nrow(selected.genes.df))[1:2],y=rep(tf.ypos,nrow(selected.genes.df))[1:2],
xend=selected.genes.df$x.pos[1:2],yend=selected.genes.df$y.pos[1:2]),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation <- ggplot(network.data, aes(x.pos,y.pos)) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks.y = element_blank()) +
geom_point(color=network.data$color,size=1) +
geom_point(data = selected.tfs.df, size=8, fill=selected.tfs.df$color,colour="black",pch=21) +
geom_point(data = selected.genes.df,aes(x.pos,y.pos), size=4, fill=selected.nodes.colors,colour="black",pch=21)
network.representation
network.representation +
geom_segment(aes(x=rep(tf.xpos,nrow(selected.genes.df))[1:2],y=rep(tf.ypos,nrow(selected.genes.df))[1:2],
xend=selected.genes.df$x.pos[1:2],yend=selected.genes.df$y.pos[1:2]),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation +
annotate("segment",aes(x=rep(tf.xpos,nrow(selected.genes.df))[1:2],y=rep(tf.ypos,nrow(selected.genes.df))[1:2],
xend=selected.genes.df$x.pos[1:2],yend=selected.genes.df$y.pos[1:2]),
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation
network.representation +
annotate("segment",
x=rep(tf.xpos,nrow(selected.genes.df))[1:2],
y=rep(tf.ypos,nrow(selected.genes.df))[1:2],
xend=selected.genes.df$x.pos[1:2],
yend=selected.genes.df$y.pos[1:2],
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation +
annotate("segment",
x=rep(tf.xpos,nrow(selected.genes.df)),
y=rep(tf.ypos,nrow(selected.genes.df)),
xend=selected.genes.df$x.pos,
yend=selected.genes.df$y.pos,
color="grey", arrow=arrow(type="closed",length=unit(0.2, "cm")))
network.representation +
annotate("segment",
x=rep(tf.xpos,nrow(selected.genes.df)),
y=rep(tf.ypos,nrow(selected.genes.df)),
xend=selected.genes.df$x.pos,
yend=selected.genes.df$y.pos,
color="grey", arrow=arrow(type="closed",length=unit(0.1, "cm")))
network.representation <- network.representation +
annotate("segment",
x=rep(tf.xpos,nrow(selected.genes.df)),
y=rep(tf.ypos,nrow(selected.genes.df)),
xend=selected.genes.df$x.pos,
yend=selected.genes.df$y.pos,
color="grey", arrow=arrow(type="closed",length=unit(0.1, "cm")))
network.representation
i <- 2
tf.xpos <- subset(network.data, names == tf.ids[input_selected.tfs[i]])[["x.pos"]]
tf.ypos <- subset(network.data, names == tf.ids[input_selected.tfs[i]])[["y.pos"]]
network.representation <- network.representation +
annotate("segment",
x=rep(tf.xpos,nrow(selected.genes.df)),
y=rep(tf.ypos,nrow(selected.genes.df)),
xend=selected.genes.df$x.pos,
yend=selected.genes.df$y.pos,
color="grey", arrow=arrow(type="closed",length=unit(0.1, "cm")))
network.representation
runApp()
=======
shiny::runApp()
>>>>>>> Stashed changes
