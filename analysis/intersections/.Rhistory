{
current.top <- top.genes[i][[1]]
set.of.genes <- brc1.clusters[[j]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
intersection.table[j,1]<- j
intersection.table[j,2] <- p.value
intersection.table[j,4] <- enrichment
intersection.table[j,5] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,2], method = "BH")
intersection.table[,3] <- fdr.values
write.table(intersection.table,
file=paste0("top_parameters_vs_clusters/intersections_", names(top.genes[i]), as.character(threshold),".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
#Get the output of the motifs
ffl.data <- read.table(file = "../../data/motifs/feedforward_loops_with_multiple_output.tsv")
head(ffl.data)
ffl.outputs <- ffl.data$V3
nrow(ffl.outputs)
length(ffl.outputs)
colnames(intersection.table) <- c("cluster", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
for (j in 1:length(ffl))
{}
ffl.outputs[3]
ffl.outputs[3][1]
degree.top
strsplit(x = ffl.outputs[1], split = ,)
strsplit(x = ffl.outputs[1], split = ",")
ffl.outputs[1]
#Get the output of the motifs
ffl.data <- read.table(file = "../../data/motifs/feedforward_loops_with_multiple_output.tsv",
header = TRUE, sep = "\t", as.is = TRUE)
ffl.outputs <- ffl.data$V3
ffl.outputs[1]
ffl.outputs <- ffl.data$V3
#Get the output of the motifs
ffl.data <- read.table(file = "../../data/motifs/feedforward_loops_with_multiple_output.tsv",
header = TRUE, sep = "\t")
head(ffl.data)
ffl.outputs <- ffl.data$V3
ffl.outputs
ffl.outputs <- ffl.data$output
ffl.outputs[1]
strsplit(x = ffl.outputs[1], split = ",")
strsplit(x = ffl.outputs[1][[1]], split = ",")
strsplit(x = ffl.outputs[[1]], split = ",")
ffl.outputs[[1]]
as.character(ffl.outputs[[1]])
strsplit(x = as.character(ffl.outputs[[1]]), split = ",")
strsplit(x = as.character(ffl.outputs[[1]]), split = ",")[[1]]
result <- intersect2sets(set1 = current.cluster, set2 = current.output, alias = alias, gene.descriptions = description)
current.cluster <- brc1.clusters[[i]]
current.output <- strsplit(x = as.character(ffl.outputs[[j]]), split = ",")[[1]]
print("TEST")
result <- intersect2sets(set1 = current.cluster, set2 = current.output, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
p.value
ffl.data[j,1]
intersection.table[j,1] <- ffl.data[1,j]
paste0("ffl_outputs_vs_clusters/ffl_outputs_vs_cluster", i)
paste0("ffl_outputs_vs_clusters/ffl_outputs_vs_cluster_", i,".txt")
#Initialize matrix to store the results
intersection.table <- matrix(ncol=6, nrow = length(ffl.outputs))
colnames(intersection.table) <- c("master_regulator 1",",master_regulator_2", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
i <- 1
j <- 2
for (i in 1:length(brc1.clusters))
{
for (j in 1:length(ffl.outputs))
{
current.cluster <- brc1.clusters[[i]]
current.output <- strsplit(x = as.character(ffl.outputs[[j]]), split = ",")[[1]]
print("TEST")
result <- intersect2sets(set1 = current.cluster, set2 = current.output, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
intersection.table[j,1] <- ffl.data[j,1]
intersection.table[j,1] <- ffl.data[j,2]
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("ffl_outputs_vs_clusters/ffl_outputs_vs_cluster_", i,".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
for (i in 1:length(brc1.clusters))
{
for (j in 1:length(ffl.outputs))
{
current.cluster <- brc1.clusters[[i]]
current.output <- strsplit(x = as.character(ffl.outputs[[j]]), split = ",")[[1]]
print(paste0("TEST",j))
result <- intersect2sets(set1 = current.cluster, set2 = current.output, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
intersection.table[j,1] <- ffl.data[j,1]
intersection.table[j,1] <- ffl.data[j,2]
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("ffl_outputs_vs_clusters/ffl_outputs_vs_cluster_", i,".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
#####Intersections between binding regions in DNA (BED files)####
#Reading the bed files of the transcription factors
peaks1 <- read.table(file = "../../../web_apps/peak_visualizer/data/bed_files/ELF3_ZT0_1_peaks.narrowPeak")
i <- 1
j <- 1
current.cluster <- brc1.clusters[[i]]
current.cluster
current.output <- strsplit(x = as.character(ffl.outputs[[j]]), split = ",")[[1]]
current.output
print(paste0("TEST",j))
result <- intersect2sets(set1 = current.cluster, set2 = current.output, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
p.value
enrichment
intersect.genes
intersection.table[j,1] <- ffl.data[j,1]
intersection.table[j,1]
ffl.data[j,1]
ffl.data[j,1][1]
ffl.data[j,1][[1]]
intersection.table[j,1] <- ffl.data[j,1][[1]]
intersection.table[j,1]
intersection.table[j,1] <- ffl.data[j,1][1]
intersection.table[j,1]
ffl.data[j,1][1]
as.character(ffl.data[j,1][1])
intersection.table[j,1] <- as.character(ffl.data[j,1][1])
intersection.table[j,1]
intersection.table[j,2] <- as.character(ffl.data[j,2][1])
intersection.table[j,2]
for (i in 1:length(brc1.clusters))
{
for (j in 1:length(ffl.outputs))
{
current.cluster <- brc1.clusters[[i]]
current.output <- strsplit(x = as.character(ffl.outputs[[j]]), split = ",")[[1]]
print(paste0("TEST",j))
result <- intersect2sets(set1 = current.cluster, set2 = current.output, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
intersection.table[j,1] <- as.character(ffl.data[j,1][1])
intersection.table[j,2] <- as.character(ffl.data[j,2][1])
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("ffl_outputs_vs_clusters/ffl_outputs_vs_cluster_", i,".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
#Initialize matrix to store the results
intersection.table <- matrix(ncol=6, nrow = length(ffl.outputs))
colnames(intersection.table) <- c("master_regulator 1","master_regulator_2", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
i <- 1
j <- 2
for (i in 1:length(brc1.clusters))
{
for (j in 1:length(ffl.outputs))
{
current.cluster <- brc1.clusters[[i]]
current.output <- strsplit(x = as.character(ffl.outputs[[j]]), split = ",")[[1]]
print(paste0("TEST",j))
result <- intersect2sets(set1 = current.cluster, set2 = current.output, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
intersection.table[j,1] <- as.character(ffl.data[j,1][1])
intersection.table[j,2] <- as.character(ffl.data[j,2][1])
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("ffl_outputs_vs_clusters/ffl_outputs_vs_cluster_", i,".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
feedback.data <- read.table(file = "../../data/motifs/feedback_loops_with_multiple_output.tsv",
header = TRUE, sep = "\t")รง
head(feedback.data)
feedback.data <- read.table(file = "../../data/motifs/feedback_loops_with_multiple_output.tsv",
header = TRUE, sep = "\t")รง
feedback.data <- read.table(file = "../../data/motifs/feedback_loops_with_multiple_output.tsv",
header = TRUE, sep = "\t")
head(feedback.data)
feedback.outputs <- feedback.data$output
#Initialize matrix to store the results
intersection.table <- matrix(ncol=6, nrow = length(feedback.outputs))
colnames(intersection.table) <- c("master_regulator 1","master_regulator_2", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
#Initialize matrix to store the results
intersection.table <- matrix(ncol=6, nrow = length(feedback.outputs))
colnames(intersection.table) <- c("master_regulator 1","master_regulator_2", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
i <- 1
j <- 2
for (i in 1:length(brc1.clusters))
{
for (j in 1:length(feedback.outputs))
{
current.cluster <- brc1.clusters[[i]]
current.output <- strsplit(x = as.character(feedback.outputs[[j]]), split = ",")[[1]]
print(paste0("TEST",j))
result <- intersect2sets(set1 = current.cluster, set2 = current.output, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
intersection.table[j,1] <- as.character(feedback.data[j,1][1])
intersection.table[j,2] <- as.character(feedback.data[j,2][1])
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("feedback_outputs_vs_clusters/feedback_outputs_vs_cluster_", i,".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
nrow(brc1.network.data)
##--Function to perform an intersection of TWO sets--##
intersect2sets <- function(set1, set2, alias, gene.descriptions){
intersection.data <- list()
sets <- list(set1, set2)
results <- supertest(x = sets, n = 931)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.genes.agi <- intersection.genes
intersection.genes.primary.symbol <- alias[intersection.genes]
names(intersection.genes.primary.symbol) <- NULL
gene.table <- matrix(nrow=length(intersection.genes), ncol=3)
colnames(gene.table) <- c("AGI", "Primary Symbol", "Description")
gene.table[,1] <- intersection.genes.agi
gene.table[,2] <- intersection.genes.primary.symbol
#  gene.table[,3] <- description
intersection.genes.description <- gene.descriptions[intersection.genes]
names(intersection.genes.description) <- NULL
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- data.frame(intersection.genes,intersection.genes.primary.symbol,intersection.genes.description,stringsAsFactors = F)
names(intersection.data) <- c("p-value", "enrichment", "gene.table")
return(intersection.data)
}
##Loop to intersect the clusters of genes and high topological values genes####
top.parameters <- c("Degree","Betweeness", "Closeness", "Eccentricity","Transitivity")
top.genes <- list(degree.top, trans.top, closeness.top, betweeness.top, eccentricity.top)
names(top.genes) <- c("Degree", "Transitivity", "Closeness", "Betweeness", "Eccentricity")
#Initialize matrix to store the results
intersection.table <- matrix(ncol=5, nrow = length(brc1.clusters))
colnames(intersection.table) <- c("cluster", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
i <- 1
j <- 2
for (i in 1:length(top.parameters))
{
for (j in 1:length(brc1.clusters))
{
current.top <- top.genes[i][[1]]
set.of.genes <- brc1.clusters[[j]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
intersection.table[j,1]<- j
intersection.table[j,2] <- p.value
intersection.table[j,4] <- enrichment
intersection.table[j,5] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,2], method = "BH")
intersection.table[,3] <- fdr.values
write.table(intersection.table,
file=paste0("top_parameters_vs_clusters/intersections_", names(top.genes[i]), as.character(threshold),".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
#Get the output of the motifs
ffl.data <- read.table(file = "../../data/motifs/feedforward_loops_with_multiple_output.tsv",
header = TRUE, sep = "\t")
head(ffl.data)
ffl.outputs <- ffl.data$output
feedback.data <- read.table(file = "../../data/motifs/feedback_loops_with_multiple_output.tsv",
header = TRUE, sep = "\t")
head(feedback.data)
feedback.outputs <- feedback.data$output
#Initialize matrix to store the results
intersection.table <- matrix(ncol=6, nrow = length(feedback.outputs))
colnames(intersection.table) <- c("master_regulator 1","master_regulator_2", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
i <- 1
j <- 2
for (i in 1:length(brc1.clusters))
{
for (j in 1:length(feedback.outputs))
{
current.cluster <- brc1.clusters[[i]]
current.output <- strsplit(x = as.character(feedback.outputs[[j]]), split = ",")[[1]]
print(paste0("TEST",j))
result <- intersect2sets(set1 = current.cluster, set2 = current.output, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
intersection.table[j,1] <- as.character(feedback.data[j,1][1])
intersection.table[j,2] <- as.character(feedback.data[j,2][1])
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("feedback_outputs_vs_clusters/feedback_outputs_vs_cluster_", i,".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
#Initialize matrix to store the results
intersection.table <- matrix(ncol=6, nrow = length(ffl.outputs))
colnames(intersection.table) <- c("master_regulator 1","master_regulator_2", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
i <- 1
j <- 2
for (i in 1:length(brc1.clusters))
{
for (j in 1:length(ffl.outputs))
{
current.cluster <- brc1.clusters[[i]]
current.output <- strsplit(x = as.character(ffl.outputs[[j]]), split = ",")[[1]]
print(paste0("TEST",j))
result <- intersect2sets(set1 = current.cluster, set2 = current.output, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
intersection.table[j,1] <- as.character(ffl.data[j,1][1])
intersection.table[j,2] <- as.character(ffl.data[j,2][1])
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("ffl_outputs_vs_clusters/ffl_outputs_vs_cluster_", i,".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
#####Intersections between binding regions in DNA (BED files)####
#Reading the bed files of the transcription factors
peaks1 <- read.table(file = "../../../web_apps/peak_visualizer/data/bed_files/ELF3_ZT0_1_peaks.narrowPeak")
######Intersection between BRC1 target genes and all the TFs target genes#########
brc1.network.data$NAC002 == 1
######Intersection between BRC1 target genes and all the TFs target genes#########
gene.names[brc1.network.data$NAC002 == 1]
######Intersection between BRC1 target genes and all the TFs target genes#########
nac002.targets <- gene.names[brc1.network.data$NAC002 == 1]
######Intersection between BRC1 target genes and all the TFs target genes#########
colnames(brc1.network.data)
######Intersection between BRC1 target genes and all the TFs target genes#########
colnames(brc1.network.data)[21:57]
######Intersection between BRC1 target genes and all the TFs target genes#########
tf.names <- colnames(brc1.network.data)[21:57]
paste0("hola","hola") <- gene.names[brc1.network.data$NAC002 == 1]
brc1.network.data[[21]]
brc1.network.data[[21]] == brc1.network.data$NAC002
gene.names[brc1.network.data[[21]] == 1]
expand.grid(tf.names,tf.names)
brc1.network.data$tf.names[1]
tf.names[1]
brc1.targets <- gene.names[brc1.network.data$BRC1 == 1]
#Initialize matrix to store the results
intersection.table <- matrix(ncol=5, nrow = length(tf.names))
colnames(intersection.table) <- c("Transcription factor", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
i <- 21
current.target.genes <- gene.names[brc1.network.data[[i]] == 1]
current.target.genes
result <- intersect2sets(set1 = brc1.targets, set2 = current.target.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
p.value
enrichment
intersect.genes
colnames(brc1.network.data)[i]
for (i in 21:57)
{
current.target.genes <- gene.names[brc1.network.data[[i]] == 1]
result <- intersect2sets(set1 = brc1.targets, set2 = current.target.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
intersection.table[j,1] <- colnames(brc1.network.data)[i]
intersection.table[j,2] <- p.value
intersection.table[j,4] <- enrichment
intersection.table[j,5] <- paste(intersect.genes, collapse= ",")
}
i
#Initialize matrix to store the results
intersection.table <- matrix(ncol=5, nrow = length(tf.names))
colnames(intersection.table) <- c("Transcription factor", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
i <- 1
j <- 2
for (i in 21:57)
{
current.target.genes <- gene.names[brc1.network.data[[i]] == 1]
result <- intersect2sets(set1 = brc1.targets, set2 = current.target.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
intersection.table[i,1] <- colnames(brc1.network.data)[i]
intersection.table[i,2] <- p.value
intersection.table[i,4] <- enrichment
intersection.table[i,5] <- paste(intersect.genes, collapse= ",")
}
colnames(brc1.network.data)[i]
i
current.target.genes <- gene.names[brc1.network.data[[i]] == 1]
current.target.genes
result <- intersect2sets(set1 = brc1.targets, set2 = current.target.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
intersection.table[i,1] <- colnames(brc1.network.data)[i]
colnames(brc1.network.data)[i]
intersection.table[i,1]
######Intersection between BRC1 target genes and all the TFs target genes#########
tf.names <- colnames(brc1.network.data)[21:57]
length(tf.names)
######Intersection between BRC1 target genes and all the TFs target genes#########
tf.names <- colnames(brc1.network.data)[21:57]
tf.names
######Intersection between BRC1 target genes and all the TFs target genes#########
tf.names <- colnames(brc1.network.data)[21:57]
brc1.targets <- gene.names[brc1.network.data$BRC1 == 1]
intersection.table[i-21,1]
#Initialize matrix to store the results
intersection.table <- matrix(ncol=5, nrow = length(tf.names))
colnames(intersection.table) <- c("Transcription factor", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
for (i in 21:57)
{{}}
i <- 1
brc1.network.data[[i+20]]
colnames(brc1.network.data)[i]
colnames(brc1.network.data)[i+20]
######Intersection between BRC1 target genes and all the TFs target genes#########
tf.names <- colnames(brc1.network.data)[21:57]
brc1.targets <- gene.names[brc1.network.data$BRC1 == 1]
#Initialize matrix to store the results
intersection.table <- matrix(ncol=5, nrow = length(tf.names))
colnames(intersection.table) <- c("Transcription factor", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
for (i in 1:length(tf.names))
{
current.target.genes <- gene.names[brc1.network.data[[i+20]] == 1]
result <- intersect2sets(set1 = brc1.targets, set2 = current.target.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
intersection.table[i,1] <- colnames(brc1.network.data)[i+20]
intersection.table[i,2] <- p.value
intersection.table[i,4] <- enrichment
intersection.table[i,5] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,2], method = "BH")
intersection.table[,3] <- fdr.values
write.table(intersection.table,
file="BRC1_targets_vs_all_TFs_targets.txt",
sep="\t", row.names = FALSE, quote = FALSE)
i <- 20
colnames(brc1.network.data)[i+20]
i <- 18
colnames(brc1.network.data)[i+20]
current.target.genes <- gene.names[brc1.network.data[[i+20]] == 1]
current.target.genes == brc1.targets
current.target.genes <- gene.names[brc1.network.data[[i+20]] == 1]
result <- intersect2sets(set1 = brc1.targets, set2 = current.target.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
p.value
enrichment
intersect.genes
length(brc1.targets)
