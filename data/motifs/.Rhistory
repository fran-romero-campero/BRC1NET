i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 10
end.time <- 2
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
output.selected.genes.df <- data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
## Load library and graph
library(igraph)
## Load ATTRACTOR network and extract gene names
atha.graph <- read.graph(file="../../attractor.graphml", format = "graphml")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/ChlamyNET')
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
gene.expression[zts.to.consider(zt.point = current.time.point) %in% seq(from=,to=24,by=4)]
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
setwd("~/Dropbox/github_repos/BRC1_transcriptional_network/data/motifs")
read.table(file = "indeces_significant_motifs_3.txt")
## Load three nodes motifs indeces
motifs.3.ind <- read.table(file="indeces_significant_motifs_3.txt")[[1]]
## Load three nodes motifs occurences in attractor
occurrences.3 <- read.table(file="occurency_subgraph_three_nodes_in_brc1.txt")[[1]]
## Motif number 1
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[1]))
## Load library and graph
library(igraph)
## Load three nodes motifs indeces
motifs.3.ind <- read.table(file="indeces_significant_motifs_3.txt")[[1]]
## Load three nodes motifs occurences in attractor
occurrences.3 <- read.table(file="occurency_subgraph_three_nodes_in_brc1.txt")[[1]]
## Motif number 1
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[1]))
occurrences.3[motifs.3.ind[1] + 1]
## Motif number 2
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[2]))
occurrences.3[motifs.3.ind[2] + 1]
maps.motif.2 <- graph.subisomorphic.lad(graph.isocreate(size=3, number=motifs.3.ind[2]),
brc1.graph, all.maps=TRUE)[["maps"]]
maps.motif.2
## Load BRC1 downstream network and extract gene names
brc1.graph <- read.graph(file="../BRC1_transcriptional_network.graphml", format = "graphml")
maps.motif.2 <- graph.subisomorphic.lad(graph.isocreate(size=3, number=motifs.3.ind[2]),
brc1.graph, all.maps=TRUE)[["maps"]]
maps.motif.2
i <- 1
current.instance <- names(maps.motif.2[[i]])
current.instance
master.regulator <- current.instance[3]
second.regulator <- current.instance[2]
master.regulator
second.regulator
output.gene <- current.instance[1]
motif.2.instances <- matrix(current.instance,nrow=1)
motif.2.instances
motif.2.instances <- matrix(c(master.regulator,second.regulator,output.gene),nrow=1)
motif.2.instances
colnames(motif.2.instances) <- c("master_regulator","second_regulator","output")
current.instance <- names(maps.motif.2[[1])
second.regulator <- current.instance[2]
current.instance <- names(maps.motif.2[[1])
current.instance <- names(maps.motif.2[[1]])
master.regulator <- current.instance[3]
second.regulator <- current.instance[2]
output.gene <- current.instance[1]
i <- 2
current.instance <- names(maps.motif.2[[i]])
master.regulator <- current.instance[3]
second.regulator <- current.instance[2]
output.gene <- current.instance[1]
master.regulator
second.regulator
motif.2.instances[,"master_regulator"] == master.regulator
(motif.2.instances[,"master_regulator"] == master.regulator) & (motif.2.instances[,"second_regulator"] == second.regulator)
which((motif.2.instances[,"master_regulator"] == master.regulator) & (motif.2.instances[,"second_regulator"] == second.regulator))
ffl.to.add <- which((motif.2.instances[,"master_regulator"] == master.regulator) & (motif.2.instances[,"second_regulator"] == second.regulator))
which(rep(FALSE,3))
which(rep(FALSE,3)) == NULL
length(which(rep(FALSE,3)))
length(ffl.to.add)
(length(ffl.to.add) != 0)
motif.2.instances[ffl.to.add,3]
paste(motif.2.instances[ffl.to.add,3],output.gene,sep=",")
length(maps.motif.2)
for(i in 2:length(maps.motif.2))
{
current.instance <- names(maps.motif.2[[i]])
master.regulator <- current.instance[3]
second.regulator <- current.instance[2]
output.gene <- current.instance[1]
ffl.to.add <- which((motif.2.instances[,"master_regulator"] == master.regulator) & (motif.2.instances[,"second_regulator"] == second.regulator))
length(which(rep(FALSE,3)))
if(length(ffl.to.add) != 0)
{
motif.2.instances[ffl.to.add,3] <- paste(motif.2.instances[ffl.to.add,3],output.gene,sep=",")
} else
{
motif.2.instances <- rbind(motif.2.instances,c(master.regulator,second.regulator,output.gene))
}
}
head(motif.2.instances)
write.table(x = motif.2.instances,file = "feedforward_loops_with_multiple_output.tsv",quote = F,sep = "\t",row.names = F)
## Motif number 3
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[3]))
occurrences.3[motifs.3.ind[3] + 1]
## Motif number 3
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[3]))
occurrences.3[motifs.3.ind[3] + 1]
## Motif number 2
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[2]))
## Motif number 3
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[3]))
motifs.3.ind[3]
occurrences.3[motifs.3.ind[3] + 1]
## Motif number 3
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[3]))
occurrences.3[motifs.3.ind[3] + 1]
maps.motif.3 <- graph.subisomorphic.lad(graph.isocreate(size=3, number=motifs.3.ind[3]),
brc1.graph, all.maps=TRUE)[["maps"]]
maps.motif.3
maps.motif.3[[1]]
current.instance <- maps.motif.3[[1]]
current.instance <- names(maps.motif.3[[1]])
current.instance
master.regulator <- current.instance[3]
master.regulator
current.instance[1]
target.2 <- current.instance[2]
master.regulator
target.1
target.1 <- current.instance[1]
target.2 <- current.instance[2]
target.1
target.2
sort(target.1,target.2)
targets <- c(target.1,target.2)
sot(targets)
sort(targets)
targets <- sort(c(target.1,target.2))
i <- 2
targets[1]
motif.3.instances <- matrix(c(master.regulator, targets[1], targets[2]),nrow=1)
motif.3.instances
colnames(motif.2.instances) <- c("master_regulator","second_regulator","output")
motif.3.instances <- matrix(nrow=length(maps.motif.3),ncol=3)
head(motif.3.instances)
motif.3.instances <- matrix(nrow=length(maps.motif.3),ncol=3)
for(i in 1:length(maps.motif.3))
{
current.instance <- names(maps.motif.3[[i]])
master.regulator <- current.instance[3]
target.1 <- current.instance[1]
target.2 <- current.instance[2]
targets <- sort(c(target.1,target.2))
motif.3.instances[i,] <- c(master.regulator, targets[1], targets[2])
}
motif.3.instances
duplicated(motif.3.instances)
motif.3.instances[!duplicated(motif.3.instances),]
motif.3.instances <- motif.3.instances[!duplicated(motif.3.instances),]
head(motif.3.instances)
write.table(x = motif.2.instances,file = "regulated_feedback_loop_output.tsv",quote = F,sep = "\t",row.names = F)
motif.3.instances <- matrix(nrow=length(maps.motif.3),ncol=3)
colnames(motif.3.instances) <- c("master_regulator","target1","target2")
for(i in 1:length(maps.motif.3))
{
current.instance <- names(maps.motif.3[[i]])
master.regulator <- current.instance[3]
target.1 <- current.instance[1]
target.2 <- current.instance[2]
targets <- sort(c(target.1,target.2))
motif.3.instances[i,] <- c(master.regulator, targets[1], targets[2])
}
motif.3.instances <- motif.3.instances[!duplicated(motif.3.instances),]
head(motif.3.instances)
write.table(x = motif.2.instances,file = "regulated_feedback_loop_output.tsv",quote = F,sep = "\t",row.names = F)
write.table(x = motif.3.instances,file = "regulated_feedback_loop_output.tsv",quote = F,sep = "\t",row.names = F)
## Motif number 4
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[4]))
occurrences.3[motifs.3.ind[4] + 1]
## Motif number 5
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[5]))
## Motif number 5
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[5]))
occurrences.3[motifs.3.ind[5] + 1]
## Motif number 6
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[6]))
occurrences.3[motifs.3.ind[6] + 1]
## Motif number 7
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[7]))
occurrences.3[motifs.3.ind[7] + 1]
## Motif number 7
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[7]))
occurrences.3[motifs.3.ind[7] + 1]
## Motif number 7
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[7]))
## Motif number 7
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[7]))
occurrences.3[motifs.3.ind[7] + 1]
## Motif number 7
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[7]))
occurrences.3[motifs.3.ind[7] + 1]
## Motif number 7
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[7]))
occurrences.3[motifs.3.ind[7] + 1]
## Motif number 7
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[7]))
occurrences.3[motifs.3.ind[7] + 1]
maps.motif.7 <- graph.subisomorphic.lad(graph.isocreate(size=3, number=motifs.3.ind[7]),
brc1.graph, all.maps=TRUE)[["maps"]]
maps.motif.7
current.instance <- names(maps.motif.7[[1]])
current.instance <- names(maps.motif.7[[1]])
regulator.1 <- current.instance[3]
regulator.2 <- current.instance[1]
output.gene <- current.instance[2]
motif.7.instances <- matrix(c(regulator.1,regulator.2,output.gene),nrow=1)
motif.7.instances <- matrix(c(regulator.1,regulator.2,output.gene),nrow=1)
colnames(motif.2.instances) <- c("regulator_1","regulator_2","output")
colnames(motif.7.instances) <- c("regulator_1","regulator_2","output")
motif.7.instances
current.instance <- names(maps.motif.7[[1]])
regulator.1 <- current.instance[3]
regulator.2 <- current.instance[1]
regulators <- sort(c(regulator.1, regulator.2))
output.gene <- current.instance[2]
motif.7.instances <- matrix(c(regulators[1],regulators[2],output.gene),nrow=1)
colnames(motif.7.instances) <- c("regulator_1","regulator_2","output")
motif.7.instances
length(maps.motif.7)
maps.motif.7 <- graph.subisomorphic.lad(graph.isocreate(size=3, number=motifs.3.ind[7]),
brc1.graph, all.maps=TRUE)[["maps"]]
current.instance <- names(maps.motif.7[[1]])
regulator.1 <- current.instance[3]
regulator.2 <- current.instance[1]
regulators <- sort(c(regulator.1, regulator.2))
output.gene <- current.instance[2]
motif.7.instances <- matrix(c(regulators[1],regulators[2],output.gene),nrow=1)
colnames(motif.7.instances) <- c("regulator_1","regulator_2","output")
for(i in 2:length(maps.motif.7))
{
current.instance <- names(maps.motif.7[[i]])
regulators <- sort(c(current.instance[3],current.instance[1]))
output.gene <- current.instance[2]
fbl.to.add <- which((motif.2.instances[,"regulator_1"] == regulators[1]) & (motif.2.instances[,"regulator_2"] == regulators[2]))
if(length(fbl.to.add) != 0)
{
motif.7.instances[fbl.to.add,3] <- paste(motif.7.instances[fbl.to.add,3],output.gene,sep=",")
} else
{
motif.7.instances <- rbind(motif.7.instances,c(regulators[1],regulators[2],output.gene))
}
}
i <- 2
current.instance <- names(maps.motif.7[[i]])
regulators <- sort(c(current.instance[3],current.instance[1]))
output.gene <- current.instance[2]
fbl.to.add <- which((motif.2.instances[,"regulator_1"] == regulators[1]) & (motif.2.instances[,"regulator_2"] == regulators[2]))
if(length(fbl.to.add) != 0)
{
motif.7.instances[fbl.to.add,3] <- paste(motif.7.instances[fbl.to.add,3],output.gene,sep=",")
} else
{
motif.7.instances <- rbind(motif.7.instances,c(regulators[1],regulators[2],output.gene))
}
maps.motif.7 <- graph.subisomorphic.lad(graph.isocreate(size=3, number=motifs.3.ind[7]),
brc1.graph, all.maps=TRUE)[["maps"]]
current.instance <- names(maps.motif.7[[1]])
regulator.1 <- current.instance[3]
regulator.2 <- current.instance[1]
regulators <- sort(c(regulator.1, regulator.2))
output.gene <- current.instance[2]
motif.7.instances <- matrix(c(regulators[1],regulators[2],output.gene),nrow=1)
colnames(motif.7.instances) <- c("regulator_1","regulator_2","output")
for(i in 2:length(maps.motif.7))
{
current.instance <- names(maps.motif.7[[i]])
regulators <- sort(c(current.instance[3],current.instance[1]))
output.gene <- current.instance[2]
fbl.to.add <- which((motif.7.instances[,"regulator_1"] == regulators[1]) & (motif.7.instances[,"regulator_2"] == regulators[2]))
if(length(fbl.to.add) != 0)
{
motif.7.instances[fbl.to.add,3] <- paste(motif.7.instances[fbl.to.add,3],output.gene,sep=",")
} else
{
motif.7.instances <- rbind(motif.7.instances,c(regulators[1],regulators[2],output.gene))
}
}
{
current.instance <- names(maps.motif.7[[i]])
regulators <- sort(c(current.instance[3],current.instance[1]))
output.gene <- current.instance[2]
fbl.to.add <- which((motif.7.instances[,"regulator_1"] == regulators[1]) & (motif.7.instances[,"regulator_2"] == regulators[2]))
if(length(fbl.to.add) != 0)
{
motif.7.instances[fbl.to.add,3] <- paste(motif.7.instances[fbl.to.add,3],output.gene,sep=",")
} else
{
motif.7.instances <- rbind(motif.7.instances,c(regulators[1],regulators[2],output.gene))
}
}
head(motif.7.instances)
write.table(x = motif.7.instances,file = "feedback_loops_with_multiple_output.tsv",quote = F,sep = "\t",row.names = F)
