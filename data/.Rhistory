boxplot(alto.nitrato.ld,bajo.nitrato.ld,alto.nitrato.sd,bajo.nitrato.sd,ylim=c(4,12))
boxplot(alto.nitrato.ld,bajo.nitrato.ld,alto.nitrato.sd,bajo.nitrato.sd,ylim=c(4,12),ylab="% Biomasa")
boxplot(alto.nitrato.ld,bajo.nitrato.ld,alto.nitrato.sd,bajo.nitrato.sd,ylim=c(4,12),ylab="% Biomasa",cex.lab=2)
boxplot(alto.nitrato.ld,bajo.nitrato.ld,alto.nitrato.sd,bajo.nitrato.sd,ylim=c(4,12),ylab="% Biomasa",cex.lab=1.5)
boxplot(alto.nitrato.ld,bajo.nitrato.ld,alto.nitrato.sd,bajo.nitrato.sd,ylim=c(4,12),
names=c("LD HighNO3", "LD LowNO3", "SD HighNO3", "SD LowNO3"),
ylab="% Biomasa",cex.lab=1.5,)
boxplot(alto.nitrato.ld,bajo.nitrato.ld,alto.nitrato.sd,bajo.nitrato.sd,ylim=c(4,12),
names=c("LD HighNO3", "LD LowNO3", "SD HighNO3", "SD LowNO3"),
ylab="% Biomasa",cex.lab=1.5)
boxplot(alto.nitrato.ld,bajo.nitrato.ld,alto.nitrato.sd,bajo.nitrato.sd,ylim=c(4,12),
names=c("LD HighNO3", "LD LowNO3", "SD HighNO3", "SD LowNO3"),
ylab="% Biomasa",cex.lab=1.5,las=2)
boxplot(alto.nitrato.ld,bajo.nitrato.ld,alto.nitrato.sd,bajo.nitrato.sd,ylim=c(4,12),
names=c("LD High", "LD Low", "SD High", "SD Low"),
ylab="% Biomasa",cex.lab=1.5,las=2)
boxplot(alto.nitrato.ld,bajo.nitrato.ld,alto.nitrato.sd,bajo.nitrato.sd,ylim=c(4,12),
names=c("LD High", "LD Low", "SD High", "SD Low"),
ylab="% Biomasa",cex.lab=1.5,las=2,col=c("lighblue"))
boxplot(alto.nitrato.ld,bajo.nitrato.ld,alto.nitrato.sd,bajo.nitrato.sd,ylim=c(4,12),
names=c("LD High", "LD Low", "SD High", "SD Low"),
ylab="% Biomasa",cex.lab=1.5,las=2,col=c("lightblue"))
boxplot(alto.nitrato.ld,bajo.nitrato.ld,alto.nitrato.sd,bajo.nitrato.sd,ylim=c(4,12),
names=c("LD High", "LD Low", "SD High", "SD Low"),
ylab="% Biomasa",cex.lab=1.5,las=2,col=c("lightblue","mistyrose"))
wilcox.test(alto.nitrato.ld,alto.nitrato.sd)
wilcox.test(alto.nitrato.ld,low.nitrato.sd)
wilcox.test(alto.nitrato.ld,bajo.nitrato.sd)
wilcox.test(alto.nitrato.ld,alto.nitrato.sd)
wilcox.test(alto.nitrato.ld,alto.nitrato.sd,alternative="lower")
wilcox.test(alto.nitrato.ld,alto.nitrato.sd,alternative="less")
wilcox.test(bajo.nitrato.ld,bajo.nitrato.sd,alternative="less")
wilcox.test(alto.nitrato.ld,alto.nitrato.sd,alternative="less")
wilcox.test(alto.nitrato.sd,bajo.nitrato.sd,alternative="less")
wilcox.test(bajo.nitrato.ld,bajo.nitrato.sd,alternative="less")
wilcox.test(bajo.nitrato.ld,bajo.nitrato.sd,alternative="less")
wilcox.test(alto.nitrato.ld,bajo.nitrato.sd,alternative="less")
starch.ld.high <- c(27.7,
30.89,
41.87,
36.37,
31.41,
28.24,
29.96,
36.22,
40.46,
34.66,
34.37)
plot(starch.ld.high)
plot(starch.ld.high,type="o")
plot(starch.ld.high,type="o",lwd=2)
plot(starch.ld.high,type="o",lwd=2,ylim=c(20,45))
plot(starch.ld.high,type="o",lwd=2,ylim=c(20,45),ylab="% Biomasa")
starch.ld.low <- c(38.52,
43.61,
41.78,
42.82,
40.47,
41.28)
starch.ld.low <- c(38.52,
43.61,
41.78,
42.82,
40.47,
41.28)
lines(starch.ld.low)
plot(starch.ld.high,type="o",lwd=2,ylim=c(20,45),ylab="% Biomasa")
starch.sd.high <- c(31.67,
33.65,
30.6,
27.52,
25.52,
25.47)
lines(starch.sd.high,type="o",lwd=2,)
plot(starch.ld.high,type="o",lwd=2,ylim=c(20,45),ylab="% Biomasa",col="lightblue")
plot(starch.ld.high,type="o",lwd=2,ylim=c(20,45),ylab="% Biomasa",col="blue")
lines(starch.sd.high,type="o",lwd=2,col="red")
starch.sd.high <- c(31.67,
33.65,
30.6,
27.52,
25.52,
25.47,
30.34,
33.11,
29.12,
27.8,
27.52
)
plot(starch.ld.high,type="o",lwd=2,ylim=c(20,45),ylab="% Biomasa",col="blue")
lines(starch.sd.high,type="o",lwd=2,col="red")
plot(starch.ld.high,type="o",lwd=2,ylim=c(20,45),ylab="% Biomasa",col="blue",xlab="")
lines(starch.sd.high,type="o",lwd=2,col="red")
plot(starch.ld.high,type="o",lwd=2,ylim=c(20,45),ylab="% Biomasa",col="blue",xlab="",xaxt="n")
lines(starch.sd.high,type="o",lwd=2,col="red")
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET')
runApp('Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET')
runApp('Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET')
runApp('Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET')
runApp('Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET')
runApp('Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET')
runApp('Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET')
runApp('Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET')
runApp('Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET')
runApp('Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET')
runApp('Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
setwd("~/Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET/data")
library(igraph)
setwd("~/Dropbox/github_repos/BRC1_transcriptional_network/BRC1_NET/data")
indeces.significant.motifs.3 <- read.table(file="indeces_significant_motifs_3.txt")
indeces.significant.motifs.3
indeces.significant.motifs.3 <- read.table(file="indeces_significant_motifs_3.txt")[[1]]
indeces.significant.motifs.3
## Load three nodes motifs indeces
motifs.3.ind <- read.table(file="indeces_significant_motifs_3.txt")[[1]]
## Load three nodes motifs occurences in attractor
occurrences.3 <- read.table(file="occurency_subgraph_three_nodes_in_brc1.txt")[[1]]
## Motif 1
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[2]))
occurrences.3[motifs.3.ind[2] + 1]
## Motif 2
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[5]))
## Motif 3
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[6]))
occurrences.3[motifs.3.ind[6] + 1]
## Motif 3
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[8]))
## Load three nodes motifs indeces
motifs.3.ind <- read.table(file="indeces_significant_motifs_3.txt")[[1]]
motifs.3.ind
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[1]))
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[2]))
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[3]))
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[4]))
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[5]))
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[6]))
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[7]))
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[8]))
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[9]))
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[1]))
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[2]))
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[3]))
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[4]))
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[5]))
## Motif 3
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[6]))
occurrences.3[motifs.3.ind[6] + 1]
maps.motif.3 <- graph.subisomorphic.lad(graph.isocreate(size=3, number=motifs.3.ind[6]),
brc1.graph, all.maps=TRUE)[["maps"]]
library(igraph)
##Load the network data
network.data <- read.table(file="brc1_network.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "",comment.char = "%")
rownames(network.data) <- network.data$names
tfs.names <- c("NAC002", "AtbZIP52", "PIF3", "MYB3", "ZAT10",
"ERF055", "VIP1", "ERF014", "NAC018", "NAP",
"ANAC032", "RGA", "ATHB_21", "ATHB_6", "SVP",
"ABI5", "IBH1", "BRC1", "ERF035", "GBF2",
"PDF2", "HSFB2B", "TCX2", "WRKY18", "ABF3",
"ATHB_40", "ZAT6", "DREB2A", "AtMYB56", "ERF003",
"NAC6_ORE1", "HAT2", "SPCH", "DOF5_4", "NAC102",
"ATHB_53", "HEC1","GBF3")
tf.ids <- c("AT1G01720", "AT1G06850" ,"AT1G09530", "AT1G22640", "AT1G27730",
"AT1G36060", "AT1G43700", "AT1G44830", "AT1G52880", "AT1G69490",
"AT1G77450", "AT2G01570", "AT2G18550", "AT2G22430", "AT2G22540",
"AT2G36270", "AT2G43060", "AT3G18550", "AT3G60490", "AT4G01120",
"AT4G04890", "AT4G11660", "AT4G14770", "AT4G31800", "AT4G34000",
"AT4G36740", "AT5G04340", "AT5G05410", "AT5G17800", "AT5G25190",
"AT5G39610", "AT5G47370", "AT5G53210", "AT5G60850", "AT5G63790",
"AT5G66700", "AT5G67060", "AT2G46270")
names(tfs.names) <- tf.ids
names(tf.ids) <- tfs.names
## Generate adjacency matrix
tf.targets <- network.data[,tfs.names]
head(tf.targets)
colnames(tf.targets) <- tf.ids[colnames(tf.targets)]
tf.targets <- as.matrix(tf.targets)
is.matrix(tf.targets)
network.genes <- rownames(network.data)
length(network.genes)
adjacency.matrix <- matrix(0,nrow=length(network.genes),ncol=length(network.genes))
dim(adjacency.matrix)
rownames(adjacency.matrix) <- network.genes
colnames(adjacency.matrix) <- network.genes
dim(adjacency.matrix[,colnames(tf.targets)])
dim(tf.targets)
adjacency.matrix[,colnames(tf.targets)] <- tf.targets
dim(adjacency.matrix)
adjacency.matrix <- t(adjacency.matrix)
brc1.graph <- graph.adjacency(adjmatrix = adjacency.matrix,mode = "directed")
vertex.names <- V(brc1.graph)$name
number.nodes <- length(vertex.names)
out.degree <- degree(brc1.graph,mode = "out")
number.tfs <- sum(out.degree != 0)
tfs.out.degree <- out.degree[out.degree != 0]
maps.motif.3 <- graph.subisomorphic.lad(graph.isocreate(size=3, number=motifs.3.ind[6]),
brc1.graph, all.maps=TRUE)[["maps"]]
maps.motif.3
current.instance <- names(maps.motif.1[[3]])
current.instance <- names(maps.motif.3[[3]])
current.instance
current.instance <- names(maps.motif.3[[3]])
master.regulator1 <- tfs.names[current.instance[3]]
master.regulator2 <- tfs.names[current.instance[1]]
output.gene <- tfs.names[current.instance[2]]
master.regulator1
master.regulator2
output.gene <- tfs.names[current.instance[2]]
output.gene
output.gene <- current.instance[2]
output.gene
master.regulators <- c(master.regulator1, master.regulator2)
master.regulators
master.regulators <- sort(c(master.regulator1, master.regulator2))
master.regulators
master.regulators <- paste(sort(c(master.regulator1, master.regulator2)),collapse=",")
master.regulators
motif.3.instances <- matrix(c(master.regulators,output.gene),nrow=1)
motif.3.instances
colnames(motif.3.instances) <- c("master_regulators","output")
motif.3.instances
i <- 2
maps.motif.3[[1]]
current.instance <- names(maps.motif.3[[1]])
master.regulator1 <- tfs.names[current.instance[3]]
master.regulator2 <- tfs.names[current.instance[1]]
output.gene <- current.instance[2]
master.regulators <- paste(sort(c(master.regulator1, master.regulator2)),collapse=",")
motif.3.instances <- matrix(c(master.regulators,output.gene),nrow=1)
colnames(motif.3.instances) <- c("master_regulators","output")
motif.3.instances
current.instance <- names(maps.motif.3[[1]])
master.regulator1 <- tfs.names[current.instance[3]]
master.regulator2 <- tfs.names[current.instance[1]]
output.gene <- current.instance[2]
master.regulators <- paste(sort(c(master.regulator1, master.regulator2)),collapse=",")
motif.3.instances <- matrix(c(master.regulators,output.gene),nrow=1)
colnames(motif.3.instances) <- c("master_regulators","output")
motif.3.instances
i <- 2
current.instance <- names(maps.motif.3[[i]])
master.regulator1 <- tfs.names[current.instance[3]]
master.regulator2 <- tfs.names[current.instance[1]]
output.gene <- current.instance[2]
master.regulators <- paste(sort(c(master.regulator1, master.regulator2)),collapse=",")
ffl.to.add <- which((motif.3.instances[,"master_regulators"] == master.regulators))
ffl.to.add
motif.3.instances[ffl.to.add,2] <- paste(motif.3.instances[ffl.to.add,2],output.gene,sep=",")
motif.3.instances
current.instance <- names(maps.motif.3[[1]])
master.regulator1 <- tfs.names[current.instance[3]]
master.regulator2 <- tfs.names[current.instance[1]]
output.gene <- current.instance[2]
master.regulators <- paste(sort(c(master.regulator1, master.regulator2)),collapse=",")
motif.3.instances <- matrix(c(master.regulators,output.gene),nrow=1)
colnames(motif.3.instances) <- c("master_regulators","output")
i <- 2
for(i in 2:length(maps.motif.3))
{
current.instance <- names(maps.motif.3[[i]])
master.regulator1 <- tfs.names[current.instance[3]]
master.regulator2 <- tfs.names[current.instance[1]]
output.gene <- current.instance[2]
master.regulators <- paste(sort(c(master.regulator1, master.regulator2)),collapse=",")
ffl.to.add <- which((motif.3.instances[,"master_regulators"] == master.regulators))
if(length(ffl.to.add) != 0)
{
motif.3.instances[ffl.to.add,2] <- paste(motif.3.instances[ffl.to.add,2],output.gene,sep=",")
} else
{
motif.3.instances <- rbind(motif.3.instances,c(master.regulators,output.gene))
}
}
head(motif.3.instances)
motif.3.instances[,1]
nrow(motif.3.instances)
write.table(x = motif.3.instances,file = "feedback_loop_with_multiple_output.tsv",quote = F,sep = "\t",row.names = F)
## Motif 3
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[8]))
occurrences.3[motifs.3.ind[8] + 1]
## Subgraphs of size 3
plot.igraph(graph.isocreate(size=3, number=0))
plot.igraph(graph.isocreate(size=3, number=1))
plot.igraph(graph.isocreate(size=3, number=2))
plot.igraph(graph.isocreate(size=3, number=3))
plot.igraph(graph.isocreate(size=3, number=4))
plot.igraph(graph.isocreate(size=3, number=5))
plot.igraph(graph.isocreate(size=3, number=6))
plot.igraph(graph.isocreate(size=3, number=7))
plot.igraph(graph.isocreate(size=3, number=7))
getwd()
motifs.3.random.graph <- read.table(file="motifs_three_random_graph.txt",header=F,as.is=T)
head(motifs.3.random.graph)
occurrency.subgraph.three.nodes.in.brc1 <- graph.motifs(brc1.graph, size=3)
occurrency.subgraph.three.nodes.in.brc1
## Test significance for each motif
estimated.p.values <- vector(mode="numeric", length=16)
for(i in 1:16)
{
estimated.p.values[i] <- sum(motifs.3.random.graph[,i] > occurrency.subgraph.three.nodes.in.brc1[i])/number.randomisation
}
## Generate randomisation
number.randomisation <- 1000
## Test significance for each motif
estimated.p.values <- vector(mode="numeric", length=16)
for(i in 1:16)
{
estimated.p.values[i] <- sum(motifs.3.random.graph[,i] > occurrency.subgraph.three.nodes.in.brc1[i])/number.randomisation
}
estimated.p.values
indeces.significant.motifs.3 <- which(estimated.p.values < 0.01) - 1
write(x = indeces.significant.motifs.3,file = "indeces_significant_motifs_3.txt",ncolumns = 1)
## Load three nodes motifs indeces
motifs.3.ind <- read.table(file="indeces_significant_motifs_3.txt")[[1]]
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[5]))
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[1]))
## Load three nodes motifs occurences in attractor
occurrences.3 <- read.table(file="occurency_subgraph_three_nodes_in_brc1.txt")[[1]]
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[2]))
## Motif 2
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[1]))
## Motif 2
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[2]))
occurrences.3[motifs.3.ind[2] + 1]
## Motif 2
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[2]))
occurrences.3[motifs.3.ind[2] + 1]
maps.motif.2 <- graph.subisomorphic.lad(graph.isocreate(size=3, number=motifs.3.ind[2]),
brc1.graph, all.maps=TRUE)[["maps"]]
maps.motif.2
current.instance <- names(maps.motif.2[[1]])
current.instance
current.instance <- names(maps.motif.2[[1]])
master.regulator <- tfs.names[current.instance[3]]
second.regulator <- tfs.names[current.instance[2]]
output.gene <- current.instance[1]
current.instance
master.regulator <- tfs.names[current.instance[3]]
master.regulator
second.regulator <- tfs.names[current.instance[2]]
second.regulator
output.gene <- current.instance[1]
output.gene
regulators <- paste(c(master.regulator, second.regulator),collapse=",")
regulators
motif.3.instances <- matrix(c(regulators,output.gene),nrow=1)
colnames(motif.3.instances) <- c("regulators","output")
motif.2.instances <- matrix(c(regulators,output.gene),nrow=1)
motif.2.instances <- matrix(c(regulators,output.gene),nrow=1)
colnames(motif.2.instances) <- c("regulators","output")
motif.2.instances
i <- 2
current.instance <- names(maps.motif.2[[i]])
master.regulator <- tfs.names[current.instance[3]]
second.regulator <- tfs.names[current.instance[2]]
output.gene <- current.instance[1]
regulators <- paste(c(master.regulator, second.regulator),collapse=",")
current.instance <- names(maps.motif.2[[1]])
master.regulator <- tfs.names[current.instance[3]]
second.regulator <- tfs.names[current.instance[2]]
output.gene <- current.instance[1]
regulators <- paste(c(master.regulator, second.regulator),collapse=",")
motif.2.instances <- matrix(c(regulators,output.gene),nrow=1)
colnames(motif.2.instances) <- c("regulators","output")
i <- 2
for(i in 2:length(maps.motif.3))
{
current.instance <- names(maps.motif.2[[i]])
master.regulator <- tfs.names[current.instance[3]]
second.regulator <- tfs.names[current.instance[2]]
output.gene <- current.instance[1]
regulators <- paste(c(master.regulator, second.regulator),collapse=",")
ffl.to.add <- which((motif.2.instances[,"regulators"] == regulators))
if(length(ffl.to.add) != 0)
{
motif.2.instances[ffl.to.add,2] <- paste(motif.2.instances[ffl.to.add,2],output.gene,sep=",")
} else
{
motif.2.instances <- rbind(motif.3.instances,c(regulators,output.gene))
}
}
motif.2.instances[,1]
maps.motif.2
current.instance <- names(maps.motif.2[[1]])
master.regulator <- tfs.names[current.instance[3]]
second.regulator <- tfs.names[current.instance[2]]
output.gene <- current.instance[1]
regulators <- paste(c(master.regulator, second.regulator),collapse=",")
motif.2.instances <- matrix(c(regulators,output.gene),nrow=1)
colnames(motif.2.instances) <- c("regulators","output")
i <- 2
for(i in 2:length(maps.motif.2))
{
current.instance <- names(maps.motif.2[[i]])
master.regulator <- tfs.names[current.instance[3]]
second.regulator <- tfs.names[current.instance[2]]
output.gene <- current.instance[1]
regulators <- paste(c(master.regulator, second.regulator),collapse=",")
ffl.to.add <- which((motif.2.instances[,"regulators"] == regulators))
if(length(ffl.to.add) != 0)
{
motif.2.instances[ffl.to.add,2] <- paste(motif.2.instances[ffl.to.add,2],output.gene,sep=",")
} else
{
motif.2.instances <- rbind(motif.3.instances,c(regulators,output.gene))
}
}
motif.2.instances[,1]
length(maps.motif.2)
i <- 2
current.instance <- names(maps.motif.2[[i]])
master.regulator <- tfs.names[current.instance[3]]
second.regulator <- tfs.names[current.instance[2]]
output.gene <- current.instance[1]
master.regulator
second.regulator
output.gene
regulators <- paste(c(master.regulator, second.regulator),collapse=",")
regulators
ffl.to.add <- which((motif.2.instances[,"regulators"] == regulators))
ffl.to.add
maps.motif.2
current.instance <- names(maps.motif.2[[1]])
master.regulator <- tfs.names[current.instance[3]]
second.regulator <- tfs.names[current.instance[2]]
output.gene <- current.instance[1]
regulators <- paste(c(master.regulator, second.regulator),collapse=",")
motif.2.instances <- matrix(c(regulators,output.gene),nrow=1)
colnames(motif.2.instances) <- c("regulators","output")
motif.2.instances
i <- 2
current.instance <- names(maps.motif.2[[i]])
master.regulator <- tfs.names[current.instance[3]]
second.regulator <- tfs.names[current.instance[2]]
output.gene <- current.instance[1]
output.gene
regulators <- paste(c(master.regulator, second.regulator),collapse=",")
ffl.to.add <- which((motif.2.instances[,"regulators"] == regulators))
ffl.to.add
motif.2.instances[ffl.to.add,2] <- paste(motif.2.instances[ffl.to.add,2],output.gene,sep=",")
motif.2.instances
i <- 3
current.instance <- names(maps.motif.2[[i]])
master.regulator <- tfs.names[current.instance[3]]
second.regulator <- tfs.names[current.instance[2]]
output.gene <- current.instance[1]
regulators <- paste(c(master.regulator, second.regulator),collapse=",")
regulators
for(i in 2:length(maps.motif.2))
{
current.instance <- names(maps.motif.2[[i]])
master.regulator <- tfs.names[current.instance[3]]
second.regulator <- tfs.names[current.instance[2]]
output.gene <- current.instance[1]
regulators <- paste(c(master.regulator, second.regulator),collapse=",")
print(regulators)
ffl.to.add <- which((motif.2.instances[,"regulators"] == regulators))
if(length(ffl.to.add) != 0)
{
motif.2.instances[ffl.to.add,2] <- paste(motif.2.instances[ffl.to.add,2],output.gene,sep=",")
} else
{
motif.2.instances <- rbind(motif.3.instances,c(regulators,output.gene))
}
}
current.instance <- names(maps.motif.2[[1]])
master.regulator <- tfs.names[current.instance[3]]
second.regulator <- tfs.names[current.instance[2]]
output.gene <- current.instance[1]
regulators <- paste(c(master.regulator, second.regulator),collapse=",")
motif.2.instances <- matrix(c(regulators,output.gene),nrow=1)
colnames(motif.2.instances) <- c("regulators","output")
for(i in 2:length(maps.motif.2))
{
current.instance <- names(maps.motif.2[[i]])
master.regulator <- tfs.names[current.instance[3]]
second.regulator <- tfs.names[current.instance[2]]
output.gene <- current.instance[1]
regulators <- paste(c(master.regulator, second.regulator),collapse=",")
print(regulators)
ffl.to.add <- which((motif.2.instances[,"regulators"] == regulators))
if(length(ffl.to.add) != 0)
{
motif.2.instances[ffl.to.add,2] <- paste(motif.2.instances[ffl.to.add,2],output.gene,sep=",")
} else
{
motif.2.instances <- rbind(motif.2.instances,c(regulators,output.gene))
}
}
motif.2.instances[,1]
write.table(x = motif.2.instances,file = "feedforward_loop_with_multiple_output.tsv",quote = F,sep = "\t",row.names = F)
nrow(motif.2.instances)
