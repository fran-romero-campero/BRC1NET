setwd("~/Dropbox/github_repos/BRC1_transcriptional_network/data")
## Input parameters
## Transcription factor, file name containing targets and ZT value
input.xgmml.file <- "BRC1_transcriptional_network.xgmml"
## Load the package required to read XML files.
library("XML")
library("methods")
## Parse the xgmml file making sure the attribute name spaces are kept
result <- xmlTreeParse(file = input.xgmml.file, addAttributeNamespaces = TRUE)
## Extract root node
rootNode <- xmlRoot(result)
## Extract nodes
node.elements <- xmlElementsByTagName(el = rootNode,name = "node")
## Store nodes info
number.nodes <- length(node.elements)
node.attributes <- xmlElementsByTagName(el = node.elements[[1]], name = "att")
number.attributes <- length(node.attributes)
attributes.names <- vector(mode = "character",length=length(number.attributes))
for(i in 1:number.attributes)
{
attributes.names[i] <- xmlAttrs(node.attributes[[i]])[["name"]]
}
attributes.names
attributes.df <- data.frame(matrix(nrow=number.nodes,ncol=length(attributes.names)))
colnames(attributes.df) <- attributes.names
nodes.names <- vector(mode = "character",length = number.nodes)
nodes.x.pos <- vector(mode = "character",length = number.nodes)
nodes.y.pos <- vector(mode = "character",length = number.nodes)
for(i in 1:number.nodes)
{
current.node <- node.elements[[i]]
nodes.names[i] <- xmlAttrs(current.node)[["label"]]
node.graphic.attrs <- xmlAttrs(xmlElementsByTagName(el = current.node, name = "graphics")[[1]])
nodes.x.pos[i] <- node.graphic.attrs[["x"]]
nodes.y.pos[i] <- node.graphic.attrs[["y"]]
node.attributes <- xmlElementsByTagName(el = current.node, name = "att")
for(j in 1:length(attributes.names))
{
current.attribute <- xmlAttrs(node.attributes[[j]])
attributes.df[i,current.attribute[["name"]]] <- current.attribute[["value"]]
}
}
nodes.df <- data.frame(names=nodes.names,x.pos=nodes.x.pos,y.pos=nodes.y.pos)
head(nodes.df)
head(attributes.df)
nodes.names <- vector(mode = "character",length = number.nodes)
nodes.x.pos <- vector(mode = "character",length = number.nodes)
nodes.y.pos <- vector(mode = "character",length = number.nodes)
nodes.color <- vector(mode = "character",length = number.nodes)
for(i in 1:number.nodes)
{
current.node <- node.elements[[i]]
nodes.names[i] <- xmlAttrs(current.node)[["label"]]
node.graphic.attrs <- xmlAttrs(xmlElementsByTagName(el = current.node, name = "graphics")[[1]])
nodes.x.pos[i] <- node.graphic.attrs[["x"]]
nodes.y.pos[i] <- node.graphic.attrs[["y"]]
nodes.color[i] <- node.graphic.attrs[["fill"]]
node.attributes <- xmlElementsByTagName(el = current.node, name = "att")
for(j in 1:length(attributes.names))
{
current.attribute <- xmlAttrs(node.attributes[[j]])
attributes.df[i,current.attribute[["name"]]] <- current.attribute[["value"]]
}
}
head(attributes.df)
nodes.df <- data.frame(names=nodes.names,x.pos=nodes.x.pos,y.pos=nodes.y.pos,color=nodes.color)
head(nodes.df)
nodes.df <- cbind(nodes.df,attributes.df)
head(nodes.df)
## Remove selected column
nodes.df <- nodes.df[,-7]
head(nodes.df)
## Store network connectivity
network.tfs <- read.table(file="network_tfs.txt",header=T)
network.tfs
network.adj <- matrix(0,nrow=number.nodes,ncol=nrow(network.tfs))
## Store network connectivity
network.tfs <- read.table(file="network_tfs.txt",header=T,as.is=T)
## Store network connectivity
regulators <- read.table(file="network_tfs.txt",header=T,as.is=T)
regulators <- matrix(0,nrow=number.nodes,ncol=nrow(network.tfs))
## Store network connectivity
network.tfs <- read.table(file="network_tfs.txt",header=T,as.is=T)
network.adj <- matrix(0,nrow=number.nodes,ncol=nrow(network.tfs))
## Store network connectivity
network.tfs <- read.table(file="network_tfs.txt",header=T,as.is=T)
network.adj <- matrix(0,nrow=number.nodes,ncol=nrow(network.tfs))
colnames(network.adj) <- network.tfs$AGI
## Load network in gml format
brc1.graph <- read.graph(file="BRC1_transcriptional_network.graphml", format = "graphml")
## Load network in gml format
library(igraph)
brc1.graph <- read.graph(file="BRC1_transcriptional_network.graphml", format = "graphml")
vertex.names <- V(brc1.graph)$name
vertex.names
head(nodes.df)
length(vertex.names)
nodes.df$names
brc1.graph <- read.graph(file="BRC1_transcriptional_network.graphml", format = "graphml")
vertex.names <- as.vector(nodes.df$names)
## Store network connectivity
network.tfs <- read.table(file="network_tfs.txt",header=T,as.is=T)
network.adj <- matrix(0,nrow=number.nodes,ncol=nrow(network.tfs))
colnames(network.adj) <- network.tfs$AGI
## Loop to retrieve regulators for each node.
i <- 1
neighbors(graph = brc1.graph, v=vertex.names[i], mode="in")$name
network.adj[i,neighbors(graph = brc1.graph, v=vertex.names[i], mode="in")$name] <- 1
head(network.adj)
## Loop to retrieve regulators for each node.
for(i in 1:number.nodes)
{
network.adj[i,neighbors(graph = brc1.graph, v=vertex.names[i], mode="in")$name] <- 1
}
head(network.adj)
colnames(network.adj) <- network.tfs$name
head(network.adj)
## Add connectivity info
nodes.df <- cbind(nodes.df,network.adj)
head(nodes.df)
## Initialise vectors to store topological parameters
brc1.indegree <- vector(mode="numeric",length=length(vertex.names))
brc1.outdegree <- vector(mode="numeric",length=length(vertex.names))
brc1.trans <- vector(mode="numeric",length=length(vertex.names))
brc1.close <- vector(mode="numeric",length=length(vertex.names))
brc1.between <- vector(mode="numeric",length=length(vertex.names))
brc1.eccent <- vector(mode="numeric",length=length(vertex.names))
## Store network connectivity
network.tfs <- read.table(file="network_tfs.txt",header=T,as.is=T)
network.adj <- matrix(0,nrow=number.nodes,ncol=nrow(network.tfs))
colnames(network.adj) <- network.tfs$AGI
## Initialise vectors to store topological parameters
brc1.indegree <- vector(mode="numeric",length=length(vertex.names))
brc1.outdegree <- vector(mode="numeric",length=length(vertex.names))
brc1.trans <- vector(mode="numeric",length=length(vertex.names))
brc1.close <- vector(mode="numeric",length=length(vertex.names))
brc1.between <- vector(mode="numeric",length=length(vertex.names))
brc1.eccent <- vector(mode="numeric",length=length(vertex.names))
## Loop to retrieve regulators and topological parameters for each node.
for(i in 1:number.nodes)
{
network.adj[i,neighbors(graph = brc1.graph, v=vertex.names[i], mode="in")$name] <- 1
brc1.indegree[i] <- degree(graph = brc1.graph, v=vertex.names[i],mode = "in")
brc1.outdegree[i] <- degree(graph = brc1.graph, v=vertex.names[i],mode = "out")
brc1.trans[i] <- transitivity(graph = brc1.graph, type = "local", vids=vertex.names[i])
brc1.close[i] <- closeness(graph = brc1.graph, vids=vertex.names[i], normalized = TRUE)
brc1.between[i] <- betweenness(graph = brc1.graph, v = vertex.names[i], normalized = TRUE)
brc1.eccent[i] <- eccentricity(graph = brc1.graph, v = vertex.names[i])
}
colnames(network.adj) <- network.tfs$name
head(network.adj)
topological.parameters <- data.frame(indegree = brc1.indegree,
outdegree = brc1.outdegree,
transitivity = brc1.trans,
closeness = brc1.close,
betweenness = brc1.between,
eccentricity = brc1.eccent)
head(topological.parameters)
## Add connectivity info
nodes.df <- cbind(nodes.df,network.adj,topological.parameters)
head(nodes.df)
hist(brc1.indegree)
hist(brc1.indegree+brc1.outdegree)
hist(brc1.indegree+brc1.outdegree,xlim=c(0,100))
hist(brc1.indegree+brc1.outdegree,xlim=c(0,100),breaks=10)
hist(brc1.indegree+brc1.outdegree,xlim=c(0,100),breaks=50)
hist(brc1.indegree+brc1.outdegree,xlim=c(0,100),breaks=100)
hist(brc1.indegree+brc1.outdegree,xlim=c(0,100),breaks=200)
hist(brc1.indegree+brc1.outdegree,xlim=c(0,100),breaks=200)
hist(brc1.indegree+brc1.outdegree,xlim=c(0,100),breaks=500)
